# -*- coding: utf-8 -*-
"""ElectronicDevice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16N2_27qkzE_mkvJZzaiVurOV8Sm5L6Ra
"""

from abc import ABC, abstractmethod
import pandas as pd

data = pd.read_csv('/content/drive/MyDrive/Project/ElectronicDevice.csv')
data.head()

# Abstract: Base class for electronic devices
class ElectronicDevice(ABC):  # Abstract class
    def __init__(self, category, brand, model, year):
        self._category = category
        self._brand = brand
        self._model = model
        self._year = year

    @abstractmethod
    def device_info(self):  # Abstract method
        """Get basic information about the device."""
        return f"{self._category}: {self._brand} {self._model} ({self._year})"

    # Encapsulation: Getter methods to access the private attributes
    def get_category(self):
        return self._category

    def get_brand(self):
        return self._brand

    def get_model(self):
        return self._model

    def get_year(self):
        return self._year


class Smartphone(ElectronicDevice):
    def __init__(self, brand, model, year, os):
        super().__init__("Smartphone", brand, model, year)
        self._os = os

    def device_info(self):
        """Get information about the smartphone."""
        return f"{super().device_info()}, OS: {self._os}"

    def get_os(self):
        return self._os

class Laptop(ElectronicDevice):
    def __init__(self, brand, model, year, os, screen_size):
        super().__init__("Laptop", brand, model, year)
        self._os = os
        self._screen_size = screen_size

    def device_info(self):
        """Get information about the laptop."""
        return f"{super().device_info()}, OS: {self._os}, Screen Size: {self._screen_size}"

    def get_os(self):
        return self._os

    def get_screen_size(self):
        return self._screen_size

class Computer(ElectronicDevice):
    def __init__(self, brand, model, year, os):
        super().__init__("Computer", brand, model, year)
        self._os = os

    def device_info(self):
        """Get information about the computer."""
        return f"{super().device_info()}, OS: {self._os}"

    def get_os(self):
        return self._os

# Class and Object: Function to create electronic device objects based on user input
def create_device():
    category = input("Enter category (Smartphone, Laptop, Computer), or type 'Done' to stop: ")
    if category.lower() == 'done':
        return None
    model = input("Enter model: ")

    # Retrieve brand, year, OS, and screen size from the dataset based on the user's input
    device_data = df[df['Model'] == model]
    if device_data.empty:
        print(f"Model '{model}' not found in the dataset.")
        return None

    brand = device_data['Brand'].values[0]
    year = device_data['Year'].values[0]
    os = device_data['OS'].values[0]
    screen_size = device_data['ScreenSize'].values[0] if category.lower() == 'laptop' else None

    if category.lower() == "smartphone":
        return Smartphone(brand, model, year, os)
    elif category.lower() == "laptop":
        return Laptop(brand, model, year, os, screen_size)
    elif category.lower() == "computer":
        return Computer(brand, model, year, os)
    else:
        print("Invalid category.")
        return None

# Main code to create and display electronic devices
devices = []
while True:
    device = create_device()
    if device is None:
        break
    devices.append(device)

# Display information about each device
for device in devices:
    print(device.device_info())